"""empty message

Revision ID: f24f664c4ed0
Revises: 8213a005831d
Create Date: 2020-08-30 00:28:35.200950

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = "f24f664c4ed0"
down_revision = "8213a005831d"
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
#    op.drop_index(
#        "ix_places_geonames_cities500_index",
#        table_name="geonames_cities500",
#        schema="places",
#    )
#    op.drop_table("geonames_cities500", schema="places")
#    op.drop_table("dim_date")
#    op.drop_table("sunspotgroupdata", schema="solardynamo")
    op.add_column(
        "place_text_search",
        sa.Column("endpoint_type", sa.String(), nullable=True),
        schema="places",
    )
    op.add_column(
        "place_text_search",
        sa.Column("input_params", sa.JSON(), nullable=True),
        schema="places",
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("place_text_search", "input_params", schema="places")
    op.drop_column("place_text_search", "endpoint_type", schema="places")
#    op.create_table(
#        "sunspotgroupdata",
#        sa.Column(
#            "obs_dt_moment",
#            sa.VARCHAR(length=11),
#            autoincrement=False,
#            nullable=True,
#        ),
#        sa.Column("dt", sa.DATE(), autoincrement=False, nullable=True),
#        sa.Column(
#            "obs_moment", sa.INTEGER(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "kislovodsk_ssg", sa.INTEGER(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "latitude",
#            postgresql.DOUBLE_PRECISION(precision=53),
#            autoincrement=False,
#            nullable=True,
#        ),
#        sa.Column(
#            "longitude",
#            postgresql.DOUBLE_PRECISION(precision=53),
#            autoincrement=False,
#            nullable=True,
#        ),
#        sa.Column(
#            "dist_to_center",
#            postgresql.DOUBLE_PRECISION(precision=53),
#            autoincrement=False,
#            nullable=True,
#        ),
#        sa.Column(
#            "obs_ssg_area", sa.INTEGER(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "corr_ssg_area", sa.INTEGER(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "largest_spot_area",
#            sa.INTEGER(),
#            autoincrement=False,
#            nullable=True,
#        ),
#        sa.Column(
#            "quantity", sa.INTEGER(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "meridian_time",
#            sa.VARCHAR(length=20),
#            autoincrement=False,
#            nullable=True,
#        ),
#        schema="solardynamo",
#    )
#    op.create_table(
#        "dim_date",
#        sa.Column("dt", sa.DATE(), autoincrement=False, nullable=True),
#        sa.Column(
#            "yr",
#            sa.INTEGER(),
#            sa.Computed("date_part('year'::text, dt)", persisted=True),
#            autoincrement=False,
#            nullable=True,
#        ),
#        sa.Column(
#            "week",
#            sa.INTEGER(),
#            sa.Computed(
#                "((date_part('DOY'::text, dt))::integer / 7)", persisted=True
#            ),
#            autoincrement=False,
#            nullable=True,
#        ),
#        sa.Column(
#            "isoweek",
#            sa.INTEGER(),
#            sa.Computed("date_part('week'::text, dt)", persisted=True),
#            autoincrement=False,
#            nullable=True,
#        ),
#    )
#    op.create_table(
#        "geonames_cities500",
#        sa.Column("index", sa.BIGINT(), autoincrement=False, nullable=True),
#        sa.Column(
#            "geonameid", sa.BIGINT(), autoincrement=False, nullable=True
#        ),
#        sa.Column("name", sa.TEXT(), autoincrement=False, nullable=True),
#        sa.Column("asciiname", sa.TEXT(), autoincrement=False, nullable=True),
#        sa.Column(
#            "alternatenames", sa.TEXT(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "latitude",
#            postgresql.DOUBLE_PRECISION(precision=53),
#            autoincrement=False,
#            nullable=True,
#        ),
#        sa.Column(
#            "longitude",
#            postgresql.DOUBLE_PRECISION(precision=53),
#            autoincrement=False,
#            nullable=True,
#        ),
#        sa.Column(
#            "feature class", sa.TEXT(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "feature code", sa.TEXT(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "country code", sa.TEXT(), autoincrement=False, nullable=True
#        ),
#        sa.Column("cc2", sa.TEXT(), autoincrement=False, nullable=True),
#        sa.Column(
#            "admin1 code", sa.TEXT(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "admin2 code", sa.TEXT(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "admin3 code", sa.TEXT(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "admin4 code", sa.TEXT(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "population", sa.BIGINT(), autoincrement=False, nullable=True
#        ),
#        sa.Column(
#            "elevation",
#            postgresql.DOUBLE_PRECISION(precision=53),
#            autoincrement=False,
#            nullable=True,
#        ),
#        sa.Column("dem", sa.BIGINT(), autoincrement=False, nullable=True),
#        sa.Column("timezone", sa.TEXT(), autoincrement=False, nullable=True),
#        sa.Column(
#            "modification date", sa.TEXT(), autoincrement=False, nullable=True
#        ),
#        schema="places",
#    )
#    op.create_index(
#        "ix_places_geonames_cities500_index",
#        "geonames_cities500",
#        ["index"],
#        unique=False,
#        schema="places",
#    )
#    # ### end Alembic commands ###
